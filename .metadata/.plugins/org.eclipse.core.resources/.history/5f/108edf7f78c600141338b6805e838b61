package gunzip;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.StringTokenizer;

import org.apache.commons.io.FileUtils;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class WordCount {
  
  public static class MyMapper
  extends Mapper<Text, BytesWritable, Text, IntWritable>
{
  private final static IntWritable one = new IntWritable( 1 );
  private Text word = new Text();

  public void map( Text key, BytesWritable value, Context context )
      throws IOException, InterruptedException
  {
      String filename = key.toString();
      filename = filename.substring(0, filename.indexOf(".gz"));
      
      // Prepare the content 
      String content = new String( value.getBytes() );
      
      Path outputPath = FileOutputFormat.getOutputPath(context);
      
      FileUtils.writeByteArrayToFile(new File(outputPath.toString() + filename), value.copyBytes());
  }
}
  

  public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    Job job = Job.getInstance(conf, "word count");
    
    job.setJarByClass(WordCount.class);
    
 // Standard stuff
    job.setMapperClass(MyMapper.class);
    
    // 
    job.setInputFormatClass(ZipFileInputFormat.class);
    
    // The output files will contain "Word [TAB] Count"
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    
    //
    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
    
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}