package zip_example;

import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

public class WordCount {

  public static class TokenizerMapper
       extends Mapper<Object, Text, Text, IntWritable>{

    private final static IntWritable one = new IntWritable(1);
    private Text word = new Text();

    public void map(Object key, Text value, Context context
                    ) throws IOException, InterruptedException {
      StringTokenizer itr = new StringTokenizer(value.toString());
      while (itr.hasMoreTokens()) {
        word.set(itr.nextToken());
        context.write(word, one);
      }
    }
  }

  public static class IntSumReducer
       extends Reducer<Text,IntWritable,Text,IntWritable> {
    private IntWritable result = new IntWritable();

    public void reduce(Text key, Iterable<IntWritable> values,
                       Context context
                       ) throws IOException, InterruptedException {
      int sum = 0;
      for (IntWritable val : values) {
        sum += val.get();
      }
      result.set(sum);
      context.write(key, result);
    }
  }
  
  public static class MyMapper
  extends Mapper<Text, BytesWritable, Text, IntWritable>
{
  private final static IntWritable one = new IntWritable( 1 );
  private Text word = new Text();

  public void map( Text key, BytesWritable value, Context context )
      throws IOException, InterruptedException
  {
      // NOTE: the filename is the *full* path within the ZIP file
      // e.g. "subdir1/subsubdir2/Ulysses-18.txt"
      String filename = key.toString();
      
      // We only want to process .txt files
      if ( filename.endsWith(".txt") == false )
          return;
      
      // Prepare the content 
      String content = new String( value.getBytes(), "UTF-8" );
      content = content.replaceAll( "[^A-Za-z \n]", "" ).toLowerCase();
      
      // Tokenize the content
      StringTokenizer tokenizer = new StringTokenizer( content );
      while ( tokenizer.hasMoreTokens() )
      {
          word.set( tokenizer.nextToken() );
          context.write( word, one );
      }
  }
}
  
  public static class MyReducer
  extends Reducer<Text, IntWritable, Text, IntWritable>
{
  public void reduce( Text key, Iterable<IntWritable> values, Context context )
      throws IOException, InterruptedException
  {
      int sum = 0;
      for ( IntWritable val : values )
      {
          sum += val.get();
      }
      context.write(key, new IntWritable(sum));
  }
}

  public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    Job job = Job.getInstance(conf, "word count");
    
    job.setJarByClass(WordCount.class);
    
 // Standard stuff
    job.setMapperClass(MyMapper.class);
    job.setReducerClass(MyReducer.class);
    
    // 
    job.setInputFormatClass(ZipFileInputFormat.class);
    
    // The output files will contain "Word [TAB] Count"
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    
    //
    ZipFileInputFormat.setInputPaths(job, inputPath);
    TextOutputFormat.setOutputPath(job, new Path(workingPath, "Output_Multiple"));
    
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}